#!/usr/bin/env sh
# vi: ft=sh
# Usage: spkg (operation) (packages)
# Help function
spkg_help() {
    printf -- "Usage: spkg {option} {args}\n"
    printf -- "--- Options ---\n"
    printf -- "  a, add\t\t -> Install packages in {args}\n"
    printf -- "  r, rm, remove\t\t -> Remove packages in {args}\n"
    printf -- "  u, upd, update\t -> Update system packages\n"
    printf -- "  q, qry, query\t\t -> Query packages that matches {args}\n"
    printf -- "  l, lst, list\t\t -> List all system packages\n"
    printf -- "  h, hlp, help\t\t -> Print usage function\n"
}

# Install packages function
spkg_install() {
    # Make sure arguments are passed through
    if [ -z "${*}" ]; then
        kserr "Install words must not be empty!" "!" || exit "${?}"
    fi

    # Install packages
    ksdebug "Installing packages..."
    paru --needed --skipreview --sudoloop --asexplicit -S "${@}"
}

# Uninstall packages function
spkg_uninstall() {
    # Make sure arguments are passed through
    if [ -z "${*}" ]; then
        kserr "Search terms must not be empty!" "1" || exit "${?}"
    fi

    # Remove packages
    ksdebug "Removing packages..."
    paru -Rns "${@}"
}

# Update all system packages function
spkg_update() {
    ksdebug "Updating packages..."
    # First, upgrade repo packages
    paru -Syu --noconfirm --nouseask --sudoloop --repo && \
        [ -f "${HOME}/.config/update-hook.sh" ] && \
            sh -c "${HOME}/.config/update-hook.sh"

    # Then, upgrade aur packages
    paru -Syu --noconfirm --nouseask --sudoloop --aur && \
        [ -f "${HOME}/.config/update-hook.sh" ] && \
            sh -c "${HOME}/.config/update-hook.sh"

    # Clear package cache
    paccache -r -k 2
}

# Search for remote packages function
spkg_query() {
    # Make sure arguments are passed through
    if [ -z "${*}" ]; then
        kserr "Search terms must not be empty!" "1" || exit "${?}"
    fi

    # Search for the packages
    ksdebug "Searching packages..."
    paru -Ss "${@}" --color=always | less -R
}

# List all installed packages function
spkg_listall() {
    ksdebug "Listing packages..."
    pacman -Qq | \
        fzf --no-sort --multi --track --cycle --scroll-off=3 \
            --layout=reverse-list --preview 'pacman -Qi {}' \
            --info=inline --prompt='Get package(s) > ' \
            --color=light
}

# Helper functions
beep() {
    if [ -n "${SPKG_BEEP}" ] && [ "${SPKG_BEEP}" = "1" ]; then
        printf '\a'
    fi
}

# Check dependencies
ksdeps "pacman paru paccache fzf"

# Check arguments
operation="${1}"

# Make sure argument is not empty
if [ -z "${operation}" ]; then
    kserr "No argument was passed!" "1" || exit "${?}"
fi
shift  # ignore operation in args

# Make sure argument is valid
case "${operation}" in
    # Install
    "a" | "add")
        spkg_install "${@}"
        beep
        ;;
    # Uninstall
    "r" | "rm" | "remove")
        spkg_uninstall "${@}"
        beep
        ;;
    # Update
    "u" | "upd" | "update")
        spkg_update
        beep
        ;;
    # Query
    "q" | "qry" | "query")
        spkg_query "${@}";;
    # List
    "l" | "lst" | "list")
        spkg_listall;;
    # Help
    "h" | "hlp" | "help")
        spkg_help;;
    # Invalid
    *)
        kserr "Invalid argument!" "1"
        code="${?}"
        spkg_help
        exit "${code}"
esac
